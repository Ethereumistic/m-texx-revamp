"use client"

import type React from "react"
import { useState, useEffect, useRef } from "react"
import { motion } from "framer-motion"
import { Card, CardContent } from "@/components/ui/card"
import { cn } from "@/lib/utils"
import { Factory, Store, User, Recycle, Trash2, PackageSearch, Container, AlertTriangle } from "lucide-react"
import Image from "next/image"
import { Carousel, CarouselContent, CarouselItem } from "@/components/ui/carousel"
import type { CarouselApi } from "@/components/ui/carousel"

type Statistic = {
  label: string
  value: string
  icon: string
  color: string
}

type LifecycleStep = {
  id: string
  title: string
  icon: React.ReactNode
  description: string
  image: string
  isRed?: boolean
  statistics: Statistic[]
}

const lifecycleSteps: LifecycleStep[] = [
  {
    id: "production",
    title: "–ü—Ä–æ–¥—É–∫—Ü–∏—è",
    icon: <Factory className="h-6 w-6" />,
    description:
      "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ—Ç–æ –Ω–∞ –¥—Ä–µ—Ö–∏ –µ —Å–ª–æ–∂–µ–Ω –ø—Ä–æ—Ü–µ—Å, –∫–æ–π—Ç–æ –≤–∫–ª—é—á–≤–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –µ—Ç–∞–ø–∏ –æ—Ç –¥–æ–±–∏–≤–∞–Ω–µ—Ç–æ –Ω–∞ —Å—É—Ä–æ–≤–∏–Ω–∏ –¥–æ –∫—Ä–∞–π–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç. –¢–æ–∑–∏ –ø—Ä–æ—Ü–µ—Å —á–µ—Å—Ç–æ –∏–º–∞ –∑–Ω–∞—á–∏—Ç–µ–ª–Ω–æ –≤—ä–∑–¥–µ–π—Å—Ç–≤–∏–µ –≤—ä—Ä—Ö—É –æ–∫–æ–ª–Ω–∞—Ç–∞ —Å—Ä–µ–¥–∞.",
    image: "https://cdn.jsdelivr.net/gh/Ethereumistic/obshtini/carousel/production.png",
    statistics: [
      { label: "Water Usage", value: "20,000L", icon: "üíß", color: "blue" },
      { label: "CO2 Emissions", value: "195M tons", icon: "üå´Ô∏è", color: "gray" },
      { label: "Pesticide Usage", value: "25%", icon: "üåø", color: "green" },
    ],
  },
  {
    id: "sales",
    title: "–ü—Ä–æ–¥–∞–∂–±–∏",
    icon: <Store className="h-6 w-6" />,
    description:
      "‚Äû–¢—ä—Ä–≥–æ–≤–∏—è—Ç–∞ —Å –¥—Ä–µ—Ö–∏ –µ –≤–∞–∂–µ–Ω –∏–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏ —Å–µ–∫—Ç–æ—Ä, –Ω–æ –±—ä—Ä–∑–∞—Ç–∞ –º–æ–¥–∞ –≤–æ–¥–∏ –¥–æ –ø—Ä–µ–∫–æ–º–µ—Ä–Ω–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∏ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ —Ç–µ–∫—Å—Ç–∏–ª–Ω–∏ –æ—Ç–ø–∞–¥—ä—Ü–∏.",
    image: "https://cdn.jsdelivr.net/gh/Ethereumistic/obshtini/carousel/selling.jpg",
    statistics: [
      { label: "Water Usage", value: "20,000L", icon: "üíß", color: "blue" },
      { label: "CO2 Emissions", value: "195M tons", icon: "üå´Ô∏è", color: "gray" },
      { label: "Pesticide Usage", value: "25%", icon: "üåø", color: "green" },
    ],
  },
  {
    id: "use",
    title: "–£–ø–æ—Ç—Ä–µ–±–∞",
    icon: <User className="h-6 w-6" />,
    description:
      "–ü–æ –≤—Ä–µ–º–µ –Ω–∞ —É–ø–æ—Ç—Ä–µ–±–∞—Ç–∞ –¥—Ä–µ—Ö–∏—Ç–µ —Å–µ –ø–µ—Ä–∞—Ç –∏ –ø–æ–¥–¥—ä—Ä–∂–∞—Ç, –∫–æ–µ—Ç–æ –∫–æ–Ω—Å—É–º–∏—Ä–∞ –≤–æ–¥–∞ –∏ –µ–Ω–µ—Ä–≥–∏—è. –ü—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ –≥—Ä–∏–∂–∞ –º–æ–∂–µ –¥–∞ —É–¥—ä–ª–∂–∏ –∂–∏–≤–æ—Ç–∞ –∏–º.",
    image: "https://cdn.jsdelivr.net/gh/Ethereumistic/obshtini/carousel/wear.jpg",
    statistics: [
      { label: "Usage Decrease", value: "-50%", icon: "‚è±Ô∏è", color: "red" },
      { label: "Purchase Increase", value: "+60%", icon: "üìà", color: "blue" },
      { label: "CO2 Reduction Potential", value: "24%", icon: "üå±", color: "green" },
    ],
  },
  {
    id: "container",
    title: "–û—Å—Ç–∞–≤—è–Ω–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä",
    icon: <Container className="h-6 w-6" />,
    description:
      "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –∑–∞ —Ç–µ–∫—Å—Ç–∏–ª –ø–æ–∑–≤–æ–ª—è–≤–∞—Ç –ø—Ä–∞–≤–∏–ª–Ω–æ—Ç–æ —Å—ä–±–∏—Ä–∞–Ω–µ –∏ —Å–æ—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –Ω–µ–Ω—É–∂–Ω–∏—Ç–µ –¥—Ä–µ—Ö–∏ –∑–∞ —Ä–µ—Ü–∏–∫–ª–∏—Ä–∞–Ω–µ.",
    image: "https://cdn.jsdelivr.net/gh/Ethereumistic/obshtini/carousel/container-crop.jpg",
    statistics: [
      { label: "Recycling Potential", value: "95%", icon: "‚ôªÔ∏è", color: "green" },
      { label: "Collection Points", value: "500+", icon: "üìç", color: "blue" },
      { label: "Waste Reduction", value: "High", icon: "üìâ", color: "green" },
    ],
  },
  {
    id: "sorting",
    title: "–°–æ—Ä—Ç–∏—Ä–∞–Ω–µ",
    icon: <PackageSearch className="h-6 w-6" />,
    description:
      "–°–æ—Ä—Ç–∏—Ä–∞–Ω–µ—Ç–æ –æ–ø—Ä–µ–¥–µ–ª—è –∫–æ–∏ –¥—Ä–µ—Ö–∏ –º–æ–≥–∞—Ç –¥–∞ –±—ä–¥–∞—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏–∑–ø–æ–ª–∑–≤–∞–Ω–∏, —Ä–µ—Ü–∏–∫–ª–∏—Ä–∞–Ω–∏ –∏–ª–∏ –ø—Ä–µ—Ä–∞–±–æ—Ç–µ–Ω–∏ –≤ –Ω–æ–≤–∏ –ø—Ä–æ–¥—É–∫—Ç–∏.",
    image: "https://cdn.jsdelivr.net/gh/Ethereumistic/obshtini/carousel/sorting.jpg",
    statistics: [
      { label: "Reusable Items", value: "60%", icon: "üëï", color: "green" },
      { label: "Recyclable Materials", value: "35%", icon: "‚ôªÔ∏è", color: "blue" },
      { label: "Non-recoverable", value: "5%", icon: "‚ö†Ô∏è", color: "red" },
    ],
  },
  {
    id: "recycling",
    title: "–†–µ—Ü–∏–∫–ª–∏—Ä–∞–Ω–µ",
    icon: <Recycle className="h-6 w-6" />,
    description:
      "–†–µ—Ü–∏–∫–ª–∏—Ä–∞–Ω–µ—Ç–æ –ø—Ä–µ–≤—Ä—ä—â–∞ —Å—Ç–∞—Ä–∏ –¥—Ä–µ—Ö–∏ –≤ –Ω–æ–≤–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∏ –∏ –ø—Ä–æ–¥—É–∫—Ç–∏, —Å–ø–µ—Å—Ç—è–≤–∞–π–∫–∏ —Ä–µ—Å—É—Ä—Å–∏ –∏ –Ω–∞–º–∞–ª—è–≤–∞–π–∫–∏ –æ—Ç–ø–∞–¥—ä—Ü–∏—Ç–µ.",
    image: "https://cdn.jsdelivr.net/gh/Ethereumistic/obshtini/carousel/recycling-crop.png",
    statistics: [
      { label: "Energy Saved", value: "80%", icon: "‚ö°", color: "yellow" },
      { label: "Water Saved", value: "4000L", icon: "üíß", color: "blue" },
      { label: "Landfill Reduced", value: "95%", icon: "üóëÔ∏è", color: "green" },
    ],
  },
  {
    id: "trash",
    title: "–ò–∑—Ö–≤—ä—Ä–ª—è–Ω–µ –Ω–∞ –±–æ–∫–ª—É–∫–∞",
    icon: <Trash2 className="h-6 w-6" />,
    description:
      "–ò–∑—Ö–≤—ä—Ä–ª—è–Ω–µ—Ç–æ –Ω–∞ —Ç–µ–∫—Å—Ç–∏–ª –≤ –æ–±—â–∏—è –±–æ–∫–ª—É–∫ –≤–æ–¥–∏ –¥–æ –∑–∞–º—ä—Ä—Å—è–≤–∞–Ω–µ –Ω–∞ –æ–∫–æ–ª–Ω–∞—Ç–∞ —Å—Ä–µ–¥–∞ –∏ –ø—Ä–æ–ø—É—Å–Ω–∞—Ç–∏ –≤—ä–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞ —Ä–µ—Ü–∏–∫–ª–∏—Ä–∞–Ω–µ.",
    image: "https://cdn.jsdelivr.net/gh/Ethereumistic/obshtini/carousel/trash.jpg",
    isRed: true,
    statistics: [
      { label: "Environmental Impact", value: "Severe", icon: "‚ö†Ô∏è", color: "red" },
      { label: "Decomposition Time", value: "200+ years", icon: "‚è≥", color: "red" },
      { label: "Recyclable Loss", value: "100%", icon: "‚ùå", color: "red" },
    ],
  },
]

export function TextileLifecycle2() {
  const [activeStep, setActiveStep] = useState<string>("production")
  const [api, setApi] = useState<CarouselApi>()
  const intervalRef = useRef<NodeJS.Timeout | null>(null)

  // Find the active step
  const activeStepData = lifecycleSteps.find((step) => step.id === activeStep)

  // Set up auto-rotation
  useEffect(() => {
    if (!api) return

    // Clear any existing interval
    if (intervalRef.current) {
      clearInterval(intervalRef.current)
    }

    // Set up new interval
    intervalRef.current = setInterval(() => {
      api.scrollNext()
    }, 7000) // 7 seconds

    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current)
      }
    }
  }, [api])

  // Update active step when carousel changes
  useEffect(() => {
    if (!api) return

    const onSelect = () => {
      const currentIndex = api.selectedScrollSnap()
      setActiveStep(lifecycleSteps[currentIndex].id)
    }

    api.on("select", onSelect)

    return () => {
      api.off("select", onSelect)
    }
  }, [api])

  return (
    <section className="py-16 px-4 md:px-6 lg:px-8">
      <div className="max-w-7xl mx-auto">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
          viewport={{ once: true }}
          className="text-center mb-16"
        >
          <h2 className="text-3xl md:text-4xl font-bold mb-4">
            –ñ–∏–∑–Ω–µ–Ω–∏—è —Ü–∏–∫—ä–ª –Ω–∞ –¥—Ä–µ—Ö–∏—Ç–µ –∏ –≤–ª–∏—è–Ω–∏–µ—Ç–æ –º—É –≤—ä—Ä—Ö—É –æ–∫–æ–ª–Ω–∞—Ç–∞ —Å—Ä–µ–¥–∞
          </h2>
        </motion.div>

        <div className="flex flex-col lg:flex-row gap-8 items-stretch ">
          {/* Left Column - Description (visible only on larger screens) */}
          <div className="hidden lg:flex lg:w-1/2 sticky  flex-col h-auto  justify-between">
            <motion.div
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.5 }}
              key={activeStep}
              className="p-6 bg-card rounded-lg border mb-4"
            >
              <div
                className={cn(
                  "flex items-center gap-3 mb-4",
                  activeStepData?.isRed ? "text-red-500" : "text-green-500",
                )}
              >
                <div className="p-3 rounded-full bg-background">{activeStepData?.icon}</div>
                <h3 className="text-2xl font-semibold">{activeStepData?.title}</h3>
              </div>
              <p className="text-muted-foreground">{activeStepData?.description}</p>
            </motion.div>

            {/* Statistics Section */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: 0.2 }}
              key={`${activeStep}-stats`}
              className="grid grid-cols-1 gap-4"
            >
              {activeStepData &&
                activeStepData.statistics.map((stat, index: number) => (
                  <motion.div
                    key={`${activeStep}-${index}`}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ duration: 0.3, delay: index * 0.1 }}
                    className={cn(
                      "p-4 rounded-lg border bg-card/50 backdrop-blur-sm",
                      "flex items-center justify-between",
                      "transition-colors duration-300",
                    )}
                  >
                    <div className="flex items-center gap-3">
                      <span className="text-2xl">{stat.icon}</span>
                      <span className="text-sm font-medium">{stat.label}</span>
                    </div>
                    <span className={cn("text-lg font-bold", `text-${stat.color}-500`)}>{stat.value}</span>
                  </motion.div>
                ))}
            </motion.div>
          </div>

          {/* Right Column - Carousel */}
          <div className="lg:w-1/2 w-full">
            <Carousel
              setApi={setApi}
              className="w-full"
              opts={{
                loop: true,
                align: "start",
              }}
            >
              <CarouselContent>
                {lifecycleSteps.map((step) => (
                  <CarouselItem key={step.id}>
                    <Card className="overflow-hidden">
                      <CardContent className="p-0">
                        <div className="relative h-96 mx-5 ">
                          <Image
                            src={step.image || "/placeholder.svg"}
                            alt={step.title}
                            fill
                            className="object-cover rounded-lg"
                          />
                        </div>
                        {/* Mobile description (visible only on smaller screens) */}
                        <div className="lg:hidden p-6">
                          <div
                            className={cn(
                              "flex items-center gap-3 mb-4",
                              step.isRed ? "text-red-500" : "text-green-500",
                            )}
                          >
                            <div className="p-3 rounded-full bg-background">{step.icon}</div>
                            <h3 className="text-xl font-semibold">{step.title}</h3>
                          </div>
                          <p className="text-muted-foreground">{step.description}</p>
                        </div>
                      </CardContent>
                    </Card>
                  </CarouselItem>
                ))}
              </CarouselContent>
            </Carousel>
          </div>
        </div>
        <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: 0.3 }}
            >
              <Card className="bg-red-50 dark:bg-red-950/30 border-red-200 dark:border-red-900 mt-4 overflow-hidden shadow-sm">
                <CardContent className="">
                  <div className="flex flex-col sm:flex-row items-center gap-4 pl-4 relative">
                    <div className="flex-shrink-0 bg-red-100 dark:bg-red-900/40 p-3 rounded-full">
                      <AlertTriangle className="size-8 sm:size-10 text-red-500 dark:text-red-400" />
                    </div>
                    <div className="flex-1 text-center sm:text-left">
                      <h4 className="text-gray-700 dark:text-gray-300 text-base sm:text-lg leading-relaxed">
                        <span className="font-bold text-red-900 dark:text-red-200 block sm:inline sm:mr-2">
                          –°–∞–º–æ 2%
                        </span>
                        –æ—Ç —Ç–µ–∫—Å—Ç–∏–ª–Ω–∏—Ç–µ –æ—Ç–ø–∞–¥—ä—Ü–∏ –≤ –ë—ä–ª–≥–∞—Ä–∏—è —Å–µ —Ä–µ—Ü–∏–∫–ª–∏—Ä–∞—Ç, –∫–æ–µ—Ç–æ –µ –Ω–∞–π-–Ω–∏—Å–∫–∏—è—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —Å—Ä–µ–¥ –≤—Å–∏—á–∫–∏
                        –º–∞—Ç–µ—Ä–∏–∞–ª–∏
                      </h4>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </motion.div>

    </div>
    </section>
  )
}

